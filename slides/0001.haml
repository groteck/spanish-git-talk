.container
  .slide
    %h1.front Git control de versiones
    %asset git_logo.png
  .slide
    #header
      #title
        %i.icon-git
        Un poco de historia:
    %ul
      %li Inventado por Linus Torvalds.
      %li Gran potencia colaborativa.
      %li Perfecto para el trabajo en grupo.
      %li Usado y mantenido por una gran comunidad.
      %li Las redes de código mas grande del mundo lo usan Github, Bitbuket, google code ... 
  .slide
    #header
      #title
        %i.icon-git
        Conceptos básicos:
    %ul
      %li HEAD
      %li .gitignore
      %li origin 
      %li master 

  .slide
    #header
      #title
        %i.icon-git
        HEAD
    .text
      Se conoce como HEAD al comit en el que se encuentra el repositorio git,
      pudiendose usar como referencia para desplazarse como veremos mas adelante.
  .slide
    #header
      #title
        %i.icon-git
        \.gitignore
    .text
      Para no incluir ficheros innecesarios a nuestro repositorio git, o ficheros que no queremos compartir
      (ficheros de configuaración personales, ficheros temporales, ...), se añaden a un fichero llamado .gitignore.
      %br
      %br
      .block
        .intro
          %i Ejemplo de fichero .gitignore
        %code
          .line
            *.c
          .line
            \/database/config.yml
          .line
            \...
  .slide
    #header
      #title
        %i.icon-git
        origin
    .text
      En muchas ocasiones, sobre todo al principio, los usuarios de git no entienden que significa cuando usan en un comando "origin",
      origin es una de las formas mas comunes de llamar a un repositorio remoto, se puede cambiar por cualquier otro nombre, pero
      es muy comun llamar asi al repositorio principal, siempre se suele usar origin y cuando se añade un repositorio remoto si 
      no se especifica se añade por defecto a esta palabra.
      %br
      %br
      .block
        .intro
          %i En este caso se actualiza el repositorio local con el contenido de nuestra rama.
        %code
          .line
            \~$ git push origin master
  .slide
    #header
      #title
        %i.icon-git
        master
    .text
      La rama principal, como con origin tambien es modificable, pero se toma como estandar ese nombre y
      es el que git le asigna por defecto a la rama con la que se inicializa un repositorio.
      %br
      %br
      .block
        .intro
          %i La usamos en el ejemplo anterior, pero no comentamos nada sobre la rama, la rama sobre la que hacemos la actualización es master.
        %code
          .line
            \~$ git push origin master
  .slide
    #header
      #title
        %i.icon-git
        Aprendiendo mediate ejemplos:
    %ul
      %li Crear un repositorio.
      %li Añadir nuestros archivos al repo.
      %li Guardar nuestro primer punto de "restauración".
      %li Crear una nueva rama.
      %li Movernos entre ramas.
      %li Mergear ramas.
  .slide
    #header
      #title
        %i.icon-git
        Crear un repositorio:
    .text
      .block
        .intro
          %i Para crear un repositorio, primero debemos entrar en la carpeta donde este el codigo que queremos añadir al repositorio,
          y luego en el, lanzar la orden:
        %code
          .line
            \~$ git init
  .slide
    #header
      #title
        %i.icon-git
        Añadir nuestros archivos al repo:
    .text
      En git realmente podemos decir que es una capa de abstracción sobre el proyecto, no tenemos que compartir necesariamente todo el codigo
      que tiene nuestro proyecto, en ocasiones como nombramos antes al explicar el .gitignore, puede haber archivos que no se compartan nunca y no
      entren en el repositorio git, pero ¿y si realmente lo que queremos es añadir los cambios de un fichero y no nos interesa el resto?, en este caso
      el fichero .gitignore no nos serviria, una razon para esto seria por ejemplo no querer añadir aun los cambios a un punto de restauración, dado que
      los quieras agrupar por funcionalidad por ejemplo.
      .block
        .intro
          %i Para añadir uno o varios ficheros al proximo punto de restauración es:
        %code
          .line
            \~$ git add fichero1 fichero2
        .intro
          %i si queremos añadir todo el directorio podemos usar:
        %code
          .line
            \~$ git add .
  .slide
    #header
      #title
        %i.icon-git
        Para nota:
    %ul
      %li  
        %code
          \~$ git log
      %li   
        %code
          \~$ git status 
      %li   
        %code
          \~$ git pull
      %li   
        %code
          \~$ git stash 
      %li   
        %code
          \~$ git checkout
  .slide
    #header
      #title
        %i.icon-git
        Github
    %ul
      %li Añadir un repositorio remoto de github.
      %li Flujo de trabajo en grupo.
      %li gist
      %li heroku
  .slide
    %h2 Fin
    .center
      %h3 ¡¡¡Muchas gracias a todos por asistir!!!
      %ul
        %li 
          %i.icon-envelope-alt
          groteck@gmail.com
        %li 
          %i.icon-github
          https://github.com/groteck
        %li 
          %i.icon-twitter
          @JGFraire
